/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package be.ipam.spotify.api;

import java.math.BigDecimal;
import be.ipam.spotify.api.model.Song;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "Song", description = "the Song API")
public interface SongApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /api/v1/songs : Create the song
     * Create the song
     *
     * @param song song object (optional)
     * @return created (status code 201)
     */
    @ApiOperation(value = "Create the song", nickname = "createSong", notes = "Create the song", tags={ "song", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "created") })
    @RequestMapping(value = "/api/v1/songs",
        consumes = { "application/xml", "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Song> createSong(@ApiParam(value = "song object"  )  @Valid @RequestBody(required = false) Song song) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/songs/{songId} : Delete the song
     * Deletes the song
     *
     * @param songId song id (required)
     * @return successful operation (status code 204)
     *         or Given song ID doesn&#39;t exist (status code 404)
     */
    @ApiOperation(value = "Delete the song", nickname = "deleteSong", notes = "Deletes the song", tags={ "song", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "successful operation"),
        @ApiResponse(code = 404, message = "Given song ID doesn't exist") })
    @RequestMapping(value = "/api/v1/songs/{songId}",
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> deleteSong(@ApiParam(value = "song id",required=true) @PathVariable("songId") BigDecimal songId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/songs/{songId} : Returns the song
     * Returns the song
     *
     * @param songId Customer Identifier (required)
     * @return successful operation (status code 200)
     *         or Given song ID doesn&#39;t exist (status code 404)
     */
    @ApiOperation(value = "Returns the song", nickname = "getSongById", notes = "Returns the song", tags={ "song", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation"),
        @ApiResponse(code = 404, message = "Given song ID doesn't exist") })
    @RequestMapping(value = "/api/v1/songs/{songId}",
        method = RequestMethod.GET)
    default ResponseEntity<Song> getSongById(@ApiParam(value = "Customer Identifier",required=true) @PathVariable("songId") Integer songId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/songs/{songId} : Update the song
     * Update the song
     *
     * @param songId song id (required)
     * @param song song object (optional)
     * @return updated (status code 200)
     */
    @ApiOperation(value = "Update the song", nickname = "updateSong", notes = "Update the song", tags={ "song", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "updated") })
    @RequestMapping(value = "/api/v1/songs/{songId}",
        consumes = { "application/xml", "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateSong(@ApiParam(value = "song id",required=true) @PathVariable("songId") BigDecimal songId,@ApiParam(value = "song object"  )  @Valid @RequestBody(required = false) Song song) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
